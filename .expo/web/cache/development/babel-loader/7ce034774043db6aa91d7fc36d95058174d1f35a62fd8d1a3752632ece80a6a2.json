{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport { StyledComponent as _StyledComponent } from \"nativewind\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { GiftedChat, Bubble } from \"react-native-gifted-chat\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport { ChevronDoubleLeftIcon } from \"react-native-heroicons/outline\";\nimport { widthPercentageToDP as wp } from \"react-native-responsive-screen\";\nimport { Chat_Url } from \"../../utils/config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatScreen = function ChatScreen(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _route$params = route.params,\n    sender = _route$params.sender,\n    recipient = _route$params.recipient,\n    id = _route$params.id;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    connection = _useState4[0],\n    setConnection = _useState4[1];\n  useEffect(function () {\n    var hubConnection = new HubConnectionBuilder().withUrl(`${Chat_Url}`).withAutomaticReconnect().build();\n    setConnection(hubConnection);\n    hubConnection.start().then(function () {\n      return console.log(\"SignalR Connected!\");\n    }).catch(function (error) {\n      return console.error(\"Error starting SignalR connection:\", error);\n    });\n    hubConnection.on(\"NewPrivateMessage\", function (message) {\n      console.log(\"NewPrivateMessage\");\n      console.log(message);\n      var formattedMessage = {\n        _id: id,\n        text: message.text,\n        createdAt: new Date(message.createdAt),\n        user: {\n          _id: message.recipient,\n          text: message.text\n        }\n      };\n      setMessages(function () {\n        return GiftedChat.append(previousMessages, [formattedMessage]);\n      });\n    });\n    return function () {\n      if (hubConnection) {\n        hubConnection.off(\"NewPrivateMessage\");\n        hubConnection.stop();\n      }\n    };\n  }, []);\n  var renderBubble = function renderBubble(props) {\n    return _jsx(Bubble, _objectSpread(_objectSpread({}, props), {}, {\n      wrapperStyle: {\n        right: {\n          backgroundColor: \"#2B3384\"\n        },\n        left: {\n          backgroundColor: \"#CB0A31\"\n        }\n      }\n    }));\n  };\n  var _onSend = function onSend() {\n    var newMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, newMessages);\n    });\n    var message = newMessages[0];\n    if (connection && message.text.trim() !== \"\") {\n      console.log(`from[${sender}] --to[${recipient}] ==${message.text}`);\n      connection.invoke(\"ReceivePrivateMessage\", {\n        from: sender,\n        to: recipient,\n        content: message.text\n      });\n    }\n  };\n  return _jsxs(_StyledComponent, {\n    style: styles.container,\n    className: \"dark:bg-neutral-900\",\n    component: View,\n    children: [_jsx(_StyledComponent, {\n      className: \"bg-gray-200 rounded-2xl dark:bg-neutral-800\",\n      onPress: function onPress() {\n        return navigation.goBack();\n      },\n      style: {\n        marginLeft: 20,\n        marginTop: 50,\n        padding: 10\n      },\n      component: TouchableOpacity,\n      children: _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          alignItems: \"center\"\n        },\n        children: [_jsx(ChevronDoubleLeftIcon, {\n          size: wp(5),\n          strokeWidth: 4,\n          color: \"black\"\n        }), _jsx(Text, {\n          style: {\n            marginLeft: 10,\n            fontSize: 16,\n            fontWeight: \"bold\"\n          }\n        }), _jsx(Text, {\n          style: {\n            marginLeft: 5,\n            fontSize: 18,\n            fontWeight: \"bold\"\n          }\n        })]\n      })\n    }), _jsx(GiftedChat, {\n      messages: messages,\n      renderAvatarOnTop: true,\n      renderBubble: renderBubble,\n      showUserAvatar: true,\n      onSend: function onSend(newMessages) {\n        return _onSend(newMessages);\n      },\n      renderUsernameOnMessage: true,\n      bottomOffset: 0,\n      user: {\n        _id: sender\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport default ChatScreen;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"container\": {\n      \"width\": \"100%\"\n    },\n    \"container@0\": {\n      \"maxWidth\": 640\n    },\n    \"container@1\": {\n      \"maxWidth\": 768\n    },\n    \"container@2\": {\n      \"maxWidth\": 1024\n    },\n    \"container@3\": {\n      \"maxWidth\": 1280\n    },\n    \"container@4\": {\n      \"maxWidth\": 1536\n    },\n    \"flex\": {\n      \"display\": \"flex\"\n    },\n    \"rounded-2xl\": {\n      \"borderTopLeftRadius\": 16,\n      \"borderTopRightRadius\": 16,\n      \"borderBottomRightRadius\": 16,\n      \"borderBottomLeftRadius\": 16\n    },\n    \"bg-gray-200\": {\n      \"backgroundColor\": \"#e5e7eb\"\n    },\n    \"dark:bg-neutral-800\": {\n      \"backgroundColor\": \"#262626\"\n    },\n    \"dark:bg-neutral-900\": {\n      \"backgroundColor\": \"#171717\"\n    }\n  },\n  atRules: {\n    \"container\": [[[\"media\", \"(min-width: 640px)\"]], [[\"media\", \"(min-width: 768px)\"]], [[\"media\", \"(min-width: 1024px)\"]], [[\"media\", \"(min-width: 1280px)\"]], [[\"media\", \"(min-width: 1536px)\"]]]\n  },\n  masks: {\n    \"dark:bg-neutral-800\": 1,\n    \"dark:bg-neutral-900\": 1\n  },\n  topics: {\n    \"container\": [\"width\"],\n    \"dark:bg-neutral-800\": [\"colorScheme\"],\n    \"dark:bg-neutral-900\": [\"colorScheme\"]\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","View","StyleSheet","Text","TouchableOpacity","GiftedChat","Bubble","HubConnectionBuilder","ChevronDoubleLeftIcon","widthPercentageToDP","wp","Chat_Url","jsx","_jsx","jsxs","_jsxs","ChatScreen","_ref","route","navigation","_route$params","params","sender","recipient","id","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","connection","setConnection","hubConnection","withUrl","withAutomaticReconnect","build","start","then","console","log","catch","error","on","message","formattedMessage","_id","text","createdAt","Date","user","append","previousMessages","off","stop","renderBubble","props","_objectSpread","wrapperStyle","right","backgroundColor","left","onSend","newMessages","arguments","length","undefined","trim","invoke","from","to","content","_StyledComponent","style","styles","container","className","component","children","onPress","goBack","marginLeft","marginTop","padding","flexDirection","alignItems","size","strokeWidth","color","fontSize","fontWeight","renderAvatarOnTop","showUserAvatar","renderUsernameOnMessage","bottomOffset","create","flex","_NativeWindStyleSheet","atRules","masks","topics"],"sources":["C:/Users/bhand/OneDrive/Desktop/Sahaj Yatri/Frontend/src/screens/ChatScreen/Chat/ChatScreen.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, StyleSheet, Text, TouchableOpacity } from \"react-native\";\r\nimport { GiftedChat, Bubble } from \"react-native-gifted-chat\";\r\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\r\nimport { ChevronDoubleLeftIcon } from \"react-native-heroicons/outline\";\r\nimport { widthPercentageToDP as wp } from \"react-native-responsive-screen\";\r\nimport { Chat_Url } from \"../../utils/config\";\r\n\r\nconst ChatScreen = ({ route, navigation }) => {\r\n  const { sender, recipient, id } = route.params;\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [connection, setConnection] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const hubConnection = new HubConnectionBuilder()\r\n      .withUrl(`${Chat_Url}`)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    setConnection(hubConnection);\r\n    hubConnection\r\n      .start()\r\n      .then(() => console.log(\"SignalR Connected!\"))\r\n      .catch((error) =>\r\n        console.error(\"Error starting SignalR connection:\", error)\r\n      );\r\n\r\n    hubConnection.on(\"NewPrivateMessage\", (message) => {\r\n      console.log(\"NewPrivateMessage\");\r\n      console.log(message);\r\n      // Ensure that the received message has the required properties\r\n      const formattedMessage = {\r\n        _id: id, // Unique identifier for the message\r\n        text: message.text, // Text content of the message\r\n        createdAt: new Date(message.createdAt), // Date when the message was created\r\n        user: {\r\n          _id: message.recipient, // Unique identifier for the user who sent the message\r\n          text: message.text, // Unique identifier for the user who sent the message\r\n          // Additional user properties such as name and avatar can also be included here\r\n        },\r\n      };\r\n\r\n      // Append the formatted message to the chat\r\n      setMessages(() =>\r\n        GiftedChat.append(previousMessages, [formattedMessage])\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      if (hubConnection) {\r\n        hubConnection.off(\"NewPrivateMessage\");\r\n        hubConnection.stop();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const renderBubble = (props) => (\r\n    <Bubble\r\n      {...props}\r\n      wrapperStyle={{\r\n        right: {\r\n          backgroundColor: \"#2B3384\", //CB0A31// Customizing background color for outgoing messages\r\n        },\r\n        left: {\r\n          backgroundColor: \"#CB0A31\", // Customizing background color for incoming messages\r\n        },\r\n      }}\r\n    />\r\n  );\r\n\r\n  const onSend = (newMessages = []) => {\r\n    setMessages((previousMessages) =>\r\n      GiftedChat.append(previousMessages, newMessages)\r\n    );\r\n    const message = newMessages[0];\r\n    if (connection && message.text.trim() !== \"\") {\r\n      // my message is successfully shown to console\r\n      console.log(`from[${sender}] --to[${recipient}] ==${message.text}`);\r\n\r\n      connection.invoke(\"ReceivePrivateMessage\", {\r\n        from: sender,\r\n        to: recipient,\r\n        content: message.text,\r\n        // createdAt: new Date().getTime(),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container} className=\"dark:bg-neutral-900\">\r\n      <TouchableOpacity\r\n        className=\"bg-gray-200 rounded-2xl dark:bg-neutral-800\"\r\n        onPress={() => navigation.goBack()}\r\n        style={{ marginLeft: 20, marginTop: 50, padding: 10 }}\r\n      >\r\n        <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n          <ChevronDoubleLeftIcon size={wp(5)} strokeWidth={4} color=\"black\" />\r\n          <Text\r\n            style={{ marginLeft: 10, fontSize: 16, fontWeight: \"bold\" }}\r\n          ></Text>\r\n          <Text style={{ marginLeft: 5, fontSize: 18, fontWeight: \"bold\" }}>\r\n            {/* Aryasn */}\r\n          </Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n      <GiftedChat\r\n        messages={messages}\r\n        renderAvatarOnTop\r\n        renderBubble={renderBubble}\r\n        showUserAvatar\r\n        onSend={(newMessages) => onSend(newMessages)}\r\n        renderUsernameOnMessage\r\n        bottomOffset={0}\r\n        user={{\r\n          _id: sender, // Assuming sender is a unique ID for the current user\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n});\r\n\r\nexport default ChatScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}